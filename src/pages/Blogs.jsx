import React from 'react';
import Blog from '../components/Blog';

const Blogs = () => {
    return (
        <div className='max-w-[1280px] px-6 py-12 mx-auto'>
            <Blog image='https://miro.medium.com/v2/resize:fit:800/0*_54xAc93WGeIuRZZ.png' qstn='When should you use Context Api?' ans={`The React Context API is a way for a React app to effectively produce global variables that can be passed around. This is the alternative to "prop drilling" or moving props from grandparent to child to parent, and so on. Context is also touted as an easier, lighter approach to state management using Redux. Context API is a (kind of) new feature added in version 16.3 of React that allows one to share state across the entire app (or part of it) lightly and with ease. Context is primarily used when some data needs to be accessible by many components at different nesting levels. Apply it sparingly because it makes component reuse more difficult. If you only want to avoid passing some props through many levels, component composition is often a simpler solution than context.`} />

            <Blog image='https://res.cloudinary.com/rangle/image/upload/w_auto,q_auto,dpr_auto,f_auto/v1669389211/blog_custom_hooks_for_redux.png' qstn='What is custom Hook?' ans='Custom Hook is a JavaScript function which we create by ourselves, when we want to share logic between other JavaScript functions. It allows you to reuse some piece of code in several parts of your app. When we want to share the logic between other components, we can extract it to a separate function. According to official documents, the custom hook has to: start with the key word use and call other hooks. Because custom hook is a JS function, the Rules of Hooks apply to it as well. Those are: 1. Never call Hooks from inside a loop, condition or nested function, 2. Hooks should sit at the top-level of your component, 3. Only call Hooks from React functional components, 4. Never call a Hook from a regular function, 5. Hooks can call other Hooks' />

            <Blog image='https://res.cloudinary.com/practicaldev/image/fetch/s--fBV9Brp0--/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnwi8ehe64zysba5y195.png' qstn='What is useRef and why we use it?' ans={`One of the various hooks included in React is the useRef hook; it is used to reference an object inside a functional component and preserves the referenced object's state between re-renders. useRef has a property called "current" used to retrieve the value of the referenced object at any time while also accepting an initial value as an argument. You can change the value of a referenced object by updating the current value. You should take note that: The value of the referenced object remains the same between re-renders. Updating the value of the referenced object doesn’t trigger a re-render. Having in mind that DOM elements are also objects, we can reference them using useRef. But now, we need to make use of another player called ref. ref is an HTML attribute that assigns a referenced object to a DOM element.`} />
            <Blog image='https://i.morioh.com/210531/aa11e5c9.webp' qstn='What is useMemo hook. How it works?' ans='The useMemo is a hook used in the functional component of react that returns a memoized value. In Computer Science, memoization is a concept used in general when we don’t need to recompute the function with a given argument for the next time as it returns the cached result. A memoized function remembers the results of output for a given set of inputs. For example, if there is a function to add two numbers, and we give the parameter as 1 and 2 for the first time the function will add these two numbers and return 3, but if the same inputs come again then we will return the cached value i.e 3 and not compute with the add function again. In react also, we use this concept, whenever in the React component, the state and props do not change the component and the component does not re-render, it shows the same output. The useMemo hook is used to improve performance in our React application.' />
            
        </div>
    );
};

export default Blogs;